/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation createAmenityOption($createAmenityOptionInput: CreateAmenityOptionInput!) {\n  createAmenityOption(createAmenityOptionInput: $createAmenityOptionInput) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.CreateAmenityOptionDocument,
    "mutation deleteAmenityOption($id: Int!) {\n  deleteAmenityOption(amenityOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.DeleteAmenityOptionDocument,
    "query AllAmenitiesOption {\n  amenityOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n      hostelAmenityType\n    }\n    error {\n      code\n    }\n  }\n}": types.AllAmenitiesOptionDocument,
    "mutation updateAmenityOption($id: Int!, $updateAmenityOptionInput: UpdateAmenityOptionInput!) {\n  updateAmenityOption(\n    amenityOptionId: $id\n    updateAmenityOptionInput: $updateAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.UpdateAmenityOptionDocument,
    "query GetAllHostelApplicationFormsByUserId($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getHostelApplicationFormsByUserId(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      hostel {\n        id\n        name\n        genderType\n        name\n        slug\n        contact {\n          phone\n          altPhone\n          email\n        }\n        address {\n          street\n          subCity\n          city\n          country\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}": types.GetAllHostelApplicationFormsByUserIdDocument,
    "query GetAllHostelApplicationForms($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getAllHostelApplicationForms(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      user {\n        id\n        fullName\n        email\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}": types.GetAllHostelApplicationFormsDocument,
    "query GetAllHostelApplicationFormsByHostelId($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getAllHostelApplicationFormsByHostelId(\n    pageSize: $pageSize\n    pageNumber: $pageNumber\n  ) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      user {\n        id\n        fullName\n        email\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}": types.GetAllHostelApplicationFormsByHostelIdDocument,
    "mutation UpdateHostelApplicationForm($data: UpdateHostelApplicationFormInput!) {\n  updateHostelApplicationForm(data: $data) {\n    data {\n      id\n      fullName\n      email\n    }\n    error {\n      message\n    }\n  }\n}": types.UpdateHostelApplicationFormDocument,
    "mutation CreateBlogPost($createBlogPostInput: CreateBlogPostInput!) {\n  createBlogPost(data: $createBlogPostInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateBlogPostDocument,
    "mutation deleteBlogPost($id: Float!) {\n  deleteBlogPost(id: $id) {\n    data {\n      id\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.DeleteBlogPostDocument,
    "query GetBlogPostBySlug($slug: String!) {\n  getBlogPostBySlug(slug: $slug) {\n    data {\n      id\n      title\n      slug\n      excerpt\n      content\n      coverImageUrl\n      metaTitle\n      metaDescription\n      metaKeywords\n      status\n      views\n      publishedAt\n      tags\n      videoUrl\n      oneLiner\n      updatedAt\n      createdAt\n      authorId\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetBlogPostBySlugDocument,
    "query GetBlogPosts($blogTags: [BlogTags!]) {\n  getAllBlogPosts(blogTags: $blogTags) {\n    data {\n      id\n      title\n      slug\n      excerpt\n      coverImageUrl\n      metaTitle\n      metaDescription\n      metaKeywords\n      status\n      views\n      publishedAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}": types.GetBlogPostsDocument,
    "mutation UpdateBlogPost($updateBlogPostInput: UpdateBlogPostInput!) {\n  updateBlogPost(data: $updateBlogPostInput) {\n    data {\n      id\n      title\n      content\n      slug\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateBlogPostDocument,
    "query BookingsByHostel {\n  bookingsByHostel {\n    data {\n      id\n      bookingKey\n      startDate\n      endDate\n      status\n      createdAt\n      updatedAt\n      room {\n        id\n        caption\n        roomNumber\n        capacity\n        status\n        attachBathroom\n        maxOccupancy\n        price {\n          baseAmountPerDay\n          currency\n          discountAmount\n          discountType\n          isDiscountActive\n        }\n        image {\n          url\n          caption\n        }\n      }\n      guest {\n        id\n        email\n        fullName\n        phoneNumber\n      }\n    }\n    error {\n      message\n      code\n      path\n    }\n  }\n}": types.BookingsByHostelDocument,
    "query getAllHostelSearchForms {\n  getAllHostelSearchForms {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      occupation\n      hostelType\n      hostelGenderType\n      roomCapacity\n      checkinDate\n      checkoutDate\n      notes\n      isActive\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n        hostelId\n        hostelSearchFormId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}": types.GetAllHostelSearchFormsDocument,
    "query getAllHostelSearchFormsByUserId {\n  getHostelSearchFormsByUserId {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      occupation\n      hostelType\n      hostelGenderType\n      roomCapacity\n      checkinDate\n      checkoutDate\n      notes\n      isActive\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n        hostelId\n        hostelSearchFormId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}": types.GetAllHostelSearchFormsByUserIdDocument,
    "mutation updateHostelSearchForm($data: UpdateHostelSearchFormInput!) {\n  updateHostelSearchForm(data: $data) {\n    data {\n      id\n      email\n    }\n  }\n}": types.UpdateHostelSearchFormDocument,
    "mutation selectGallery($galleryId: Int!, $hostelId: Int!) {\n  selectGallery(galleryId: $galleryId, hostelId: $hostelId) {\n    data {\n      id\n      caption\n      url\n      isSelected\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.SelectGalleryDocument,
    "query getHostelDetailsBasic {\n  getHostelByToken {\n    data {\n      name\n      slug\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      hasOnboardingComplete\n      hostelType\n      address {\n        country\n        city\n        subCity\n        street\n      }\n    }\n  }\n}": types.GetHostelDetailsBasicDocument,
    "mutation CreateHostelGuest($createHostelGuestInput: CreateHostelGuestInput!, $withWelcomeEmail: Boolean!, $allowEdit: Boolean!) {\n  createHostelGuest(\n    createHostelGuestInput: $createHostelGuestInput\n    withWelcomeEmail: $withWelcomeEmail\n    allowEdit: $allowEdit\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.CreateHostelGuestDocument,
    "mutation RemoveHostelGuest($id: Int!) {\n  removeHostelGuest(id: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.RemoveHostelGuestDocument,
    "query getHostelGuests {\n  hostelGuestsByHostelId {\n    data {\n      id\n      hostelId\n      roomId\n      fullName\n      email\n      phoneNumber\n      emergencyContact\n      gender\n      dateOfBirth\n      nationality\n      permanentAddress\n      religion\n      occupation\n      profilePicture\n      checkinDate\n      checkoutDate\n      notes\n      isEditable\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}": types.GetHostelGuestsDocument,
    "query getHostelGuestWithToken($token: String!) {\n  hostelGuestByToken(token: $token) {\n    data {\n      id\n      hostelId\n      roomId\n      fullName\n      email\n      phoneNumber\n      emergencyContact\n      gender\n      dateOfBirth\n      nationality\n      permanentAddress\n      religion\n      occupation\n      profilePicture\n      checkinDate\n      checkoutDate\n      notes\n      isEditable\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}": types.GetHostelGuestWithTokenDocument,
    "mutation UpdateHostelGuest($updateHostelGuestInput: UpdateHostelGuestInput!, $withWelcomeEmail: Boolean!, $allowEdit: Boolean!) {\n  updateHostelGuest(\n    updateHostelGuestInput: $updateHostelGuestInput\n    withWelcomeEmail: $withWelcomeEmail\n    allowEdit: $allowEdit\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.UpdateHostelGuestDocument,
    "mutation CreateGallery($data: CreateGalleryInput!) {\n  createGallery(data: $data) {\n    data {\n      id\n      hostelId\n      url\n      caption\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateGalleryDocument,
    "mutation DeleteGallery($galleryId: Int!) {\n  deleteGallery(galleryId: $galleryId) {\n    data {\n      id\n      hostelId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.DeleteGalleryDocument,
    "query GetGalleryByHostelId($hostelId: Int!) {\n  getGalleryByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      hostelId\n      url\n      type\n      caption\n      isSelected\n      createdAt\n      updatedAt\n    }\n  }\n}": types.GetGalleryByHostelIdDocument,
    "mutation UpdateGallery($galleryId: Int!, $data: UpdateGalleryInput!) {\n  updateGallery(galleryId: $galleryId, data: $data) {\n    data {\n      id\n      hostelId\n      url\n      isSelected\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateGalleryDocument,
    "mutation createAddress($input: CreateAddressInput!) {\n  createAddress(data: $input) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateAddressDocument,
    "mutation createContacts($input: CreateContactInput!) {\n  createContact(data: $input) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateContactsDocument,
    "mutation createHostel($input: CreateHostelInput!) {\n  createHostel(data: $input) {\n    data {\n      id\n      ownerId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateHostelDocument,
    "mutation createOnboardingHostel($input: CreateOnboardingHostelInput!) {\n  createOnboardingHostel(data: $input) {\n    data {\n      id\n      ownerId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateOnboardingHostelDocument,
    "query getAddressByHostelId($hostelId: Float!) {\n  getAddressByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      country\n      city\n      subCity\n      street\n      latitude\n      longitude\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetAddressByHostelIdDocument,
    "query getContactsByHostelId($hostelId: Float!) {\n  getContactByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      email\n      phone\n      altPhone\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetContactsByHostelIdDocument,
    "query getHostelByToken {\n  getHostelByToken {\n    data {\n      id\n      name\n      description\n      slug\n      hostelType\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      hasOnboardingComplete\n      admissionFee\n      depositAmount\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetHostelByTokenDocument,
    "mutation updateAddress($input: UpdateAddressInput!, $addressId: Float!) {\n  updateAddress(data: $input, addressId: $addressId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateAddressDocument,
    "mutation updateContact($input: UpdateContactInput!, $contactId: Float!) {\n  updateContact(data: $input, contactId: $contactId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateContactDocument,
    "mutation updateHostel($input: UpdateHostelInput!, $hostelId: Float!) {\n  updateHostel(data: $input, hostelId: $hostelId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateHostelDocument,
    "query GetAllHostels($pageSize: Int, $pageNumber: Int, $isSuperAdmin: Boolean) {\n  getAllHostels(\n    pageSize: $pageSize\n    pageNumber: $pageNumber\n    isSuperAdmin: $isSuperAdmin\n  ) {\n    data {\n      id\n      name\n      description\n      slug\n      verifiedByCommunityOwner\n      verifiedBySuperAdmin\n      ownerId\n      createdAt\n      updatedAt\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      owner {\n        email\n        fullName\n      }\n      contact {\n        id\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        status\n        capacity\n        caption\n        description\n        roomNumber\n        maxOccupancy\n        attachBathroom\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          discountAmount\n          discountType\n          isDynamicPricing\n          isDiscountActive\n        }\n        image {\n          id\n          caption\n          url\n        }\n      }\n      gallery {\n        id\n        caption\n        url\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetAllHostelsDocument,
    "mutation VerifyHostel($hostelId: Int!, $status: Boolean!) {\n  verifyHostel(hostelId: $hostelId, status: $status) {\n    data {\n      id\n      name\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.VerifyHostelDocument,
    "query GetAllHostelServices {\n  getAllHostelServices {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n      dueDate\n      completionDate\n      createdAt\n      hostel {\n        name\n      }\n    }\n    error {\n      message\n    }\n  }\n}": types.GetAllHostelServicesDocument,
    "mutation ChangeCurrentHostel($hostelId: Int!) {\n  changeCurrentHostel(hostelId: $hostelId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.ChangeCurrentHostelDocument,
    "query GetAllListingsByUserId($pageSize: Int, $pageNumber: Int) {\n  getHostelsByUserToken(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      name\n      description\n      slug\n      verifiedByCommunityOwner\n      verifiedBySuperAdmin\n      ownerId\n      createdAt\n      updatedAt\n      admissionFee\n      depositAmount\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      owner {\n        email\n        fullName\n      }\n      contact {\n        id\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        status\n        capacity\n        caption\n        description\n        roomNumber\n        maxOccupancy\n        attachBathroom\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          discountAmount\n          discountType\n          isDynamicPricing\n          isDiscountActive\n        }\n        image {\n          id\n          caption\n          url\n        }\n      }\n      gallery {\n        id\n        caption\n        url\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetAllListingsByUserIdDocument,
    "mutation ChangePassword($userId: Float!, $input: ChangePasswordInput!) {\n  changePassword(userId: $userId, input: $input)\n}": types.ChangePasswordDocument,
    "query getUserById($id: Float!) {\n  getUserById(id: $id) {\n    data {\n      id\n      isVerified\n      fullName\n      email\n      phoneNumber\n      altPhoneNumber\n      city\n      gender\n      dateOfBirth\n      profilePicture\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetUserByIdDocument,
    "query MyBookings {\n  myBookings {\n    data {\n      id\n      roomId\n      bookingKey\n      guestId\n      startDate\n      endDate\n      status\n      paymentPlatformName\n      createdAt\n      updatedAt\n      room {\n        id\n        roomNumber\n        capacity\n        caption\n        status\n        attachBathroom\n        maxOccupancy\n        price {\n          currency\n          baseAmountPerDay\n          baseAmountPerMonth\n        }\n      }\n      guest {\n        id\n        fullName\n        email\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.MyBookingsDocument,
    "mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      altPhoneNumber\n      city\n      gender\n      dateOfBirth\n      profilePicture\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateUserDocument,
    "mutation createHostelService($data: CreateHostelServiceDto!) {\n  createHostelService(input: $data) {\n    data {\n      budget\n      description\n      id\n      title\n    }\n    error {\n      message\n    }\n  }\n}": types.CreateHostelServiceDocument,
    "mutation DeleteHostelServicesById($id: Float!) {\n  deleteHostelService(id: $id) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}": types.DeleteHostelServicesByIdDocument,
    "query GetHostelServicesByHostelId($hostelId: Float!) {\n  getHostelServicesByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n      dueDate\n      completionDate\n      createdAt\n    }\n    error {\n      message\n    }\n  }\n}": types.GetHostelServicesByHostelIdDocument,
    "query GetHostelServicesById($id: Float!) {\n  getHostelServiceById(id: $id) {\n    data {\n      id\n      title\n      description\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}": types.GetHostelServicesByIdDocument,
    "mutation UpdateHostelServicesById($input: UpdateHostelServiceDto!) {\n  updateHostelService(input: $input) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}": types.UpdateHostelServicesByIdDocument,
    "mutation createRoomAmenityOption($createRoomAmenityOptionInput: CreateRoomAmenityOptionInput!) {\n  createRoomAmenityOption(\n    createRoomAmenityOptionInput: $createRoomAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.CreateRoomAmenityOptionDocument,
    "mutation deleteRoomAmenityOption($id: Int!) {\n  deleteRoomAmenityOption(roomAmenityOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.DeleteRoomAmenityOptionDocument,
    "query AllRoomAmenitiesOption {\n  roomAmenityOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n    }\n    error {\n      code\n    }\n  }\n}": types.AllRoomAmenitiesOptionDocument,
    "mutation updateRoomAmenityOption($id: Int!, $updateRoomAmenityOptionInput: UpdateRoomAmenityOptionInput!) {\n  updateRoomAmenityOption(\n    roomAmenityOptionId: $id\n    updateRoomAmenityOptionInput: $updateRoomAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.UpdateRoomAmenityOptionDocument,
    "mutation CreatePriceRule($createPriceRuleInput: CreateDynamicPriceRuleInput!) {\n  createPriceRule(createPriceRuleInput: $createPriceRuleInput) {\n    data {\n      id\n      name\n      description\n      roomId\n      startDate\n      endDate\n      amount\n      isWeekend\n      isActive\n      priority\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}": types.CreatePriceRuleDocument,
    "mutation RemovePriceRule($id: Int!) {\n  removePriceRule(id: $id) {\n    data {\n      id\n      name\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.RemovePriceRuleDocument,
    "query GetPriceRulesByRoom($roomId: Int!) {\n  priceRulesByRoom(roomId: $roomId) {\n    data {\n      id\n      name\n      description\n      amount\n      startDate\n      endDate\n      isWeekend\n      isActive\n      priority\n    }\n  }\n}": types.GetPriceRulesByRoomDocument,
    "mutation UpdatePriceRule($updatePriceInput: UpdateDynamicPriceRuleInput!) {\n  updatePriceRule(updatePriceInput: $updatePriceInput) {\n    data {\n      id\n      name\n      description\n      roomId\n      startDate\n      endDate\n      amount\n      isWeekend\n      isActive\n      priority\n      updatedAt\n    }\n  }\n}": types.UpdatePriceRuleDocument,
    "mutation CreateRoomImage($data: CreateRoomImageInput!) {\n  createRoomImage(data: $data) {\n    data {\n      id\n      roomId\n      url\n      caption\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateRoomImageDocument,
    "mutation DeleteRoomImage($roomImageId: Int!) {\n  deleteRoomImage(roomImageId: $roomImageId) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.DeleteRoomImageDocument,
    "query GetRoomImagesByRoomId($roomId: Int!) {\n  getRoomImagesByRoomId(roomId: $roomId) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetRoomImagesByRoomIdDocument,
    "mutation UpdateRoomImage($roomImageId: Int!, $data: UpdateRoomImageInput!) {\n  updateRoomImage(roomImageId: $roomImageId, data: $data) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateRoomImageDocument,
    "mutation CreatePrice($createPriceInput: CreatePriceInput!) {\n  createPrice(createPriceInput: $createPriceInput) {\n    data {\n      id\n      baseAmountPerDay\n      baseAmountPerMonth\n      currency\n      roomId\n      isDynamicPricing\n      discountAmount\n      discountType\n      isDiscountActive\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreatePriceDocument,
    "mutation CreateRoom($createRoomInput: CreateRoomInput!) {\n  createRoom(createRoomInput: $createRoomInput) {\n    data {\n      id\n      status\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateRoomDocument,
    "mutation CreateRoomAmenity($createAmenityInput: CreateRoomAmenityInput!) {\n  createRoomAmenity(createAmenityInput: $createAmenityInput) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateRoomAmenityDocument,
    "mutation deleteRoom($id: Int!) {\n  removeRoom(id: $id) {\n    data {\n      id\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.DeleteRoomDocument,
    "query FindAllAmenities {\n  findAllAmenities {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.FindAllAmenitiesDocument,
    "query FindAnAmenityById($id: Int!) {\n  findAnAmenityById(id: $id) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.FindAnAmenityByIdDocument,
    "query FindAmenityByRoomId($roomId: Int!) {\n  findAmenityByRoomId(roomId: $roomId) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.FindAmenityByRoomIdDocument,
    "query GetRoomWithPriceAndGallery($id: Int!) {\n  room(id: $id) {\n    data {\n      id\n      status\n      capacity\n      description\n      caption\n      maxOccupancy\n      roomNumber\n      attachBathroom\n      hostelId\n      createdAt\n      updatedAt\n      image {\n        id\n        caption\n        url\n        roomId\n        createdAt\n        updatedAt\n      }\n      price {\n        id\n        baseAmountPerDay\n        baseAmountPerMonth\n        currency\n        discountAmount\n        discountType\n        isDiscountActive\n        isDynamicPricing\n        createdAt\n        updatedAt\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetRoomWithPriceAndGalleryDocument,
    "query GetRooms {\n  roomsByHostel {\n    data {\n      id\n      status\n      capacity\n      caption\n      roomNumber\n      attachBathroom\n      hostelId\n      image {\n        id\n        caption\n        url\n        roomId\n        createdAt\n        updatedAt\n      }\n      price {\n        id\n        currency\n        baseAmountPerDay\n        baseAmountPerMonth\n        isDynamicPricing\n        discountAmount\n        discountType\n        isDiscountActive\n        roomId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetRoomsDocument,
    "mutation RemoveRoomAmenity($roomAmenityId: Int!) {\n  removeRoomAmenity(roomAmenityId: $roomAmenityId) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.RemoveRoomAmenityDocument,
    "mutation UpdatePrice($updatePriceInput: UpdatePriceInput!) {\n  updatePrice(updatePriceInput: $updatePriceInput) {\n    data {\n      id\n      baseAmountPerDay\n      baseAmountPerMonth\n      currency\n      isDynamicPricing\n      discountAmount\n      discountType\n      isDiscountActive\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdatePriceDocument,
    "mutation UpdateRoom($updateRoomInput: UpdateRoomInput!) {\n  updateRoom(updateRoomInput: $updateRoomInput) {\n    data {\n      id\n      status\n      capacity\n      caption\n      roomNumber\n      attachBathroom\n      hostelId\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateRoomDocument,
    "mutation UpdateRoomAmenity($updateAmenityInput: UpdateRoomAmenityInput!) {\n  updateRoomAmenity(updateAmenityInput: $updateAmenityInput) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateRoomAmenityDocument,
    "mutation createRules($input: CreateRulesInput!) {\n  createRules(createRulesInput: $input) {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateRulesDocument,
    "query getRules {\n  getRulesByHostel {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetRulesDocument,
    "mutation updateRules($input: UpdateRulesInput!, $rulesId: Int!) {\n  updateRules(rulesId: $rulesId, updateRulesInput: $input) {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateRulesDocument,
    "mutation createServiceOption($createServiceOptionInput: CreateServiceOptionInput!) {\n  createServiceOption(createServiceOptionInput: $createServiceOptionInput) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.CreateServiceOptionDocument,
    "mutation deleteServiceOption($id: Int!) {\n  deleteServiceOption(serviceOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.DeleteServiceOptionDocument,
    "query AllServiceOptions {\n  serviceOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n    }\n    error {\n      code\n    }\n  }\n}": types.AllServiceOptionsDocument,
    "mutation updateServiceOption($id: Int!, $updateServiceOptionInput: UpdateServiceOptionInput!) {\n  updateServiceOption(\n    serviceOptionId: $id\n    updateServiceOptionInput: $updateServiceOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.UpdateServiceOptionDocument,
    "query GetServiceByHostelId($hostelId: Float!) {\n  findServiceByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetServiceByHostelIdDocument,
    "mutation CreateService($createServiceInput: CreateServiceDto!) {\n  createService(createServiceInput: $createServiceInput) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateServiceDocument,
    "mutation RemoveService($id: Float!) {\n  removeService(id: $id) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.RemoveServiceDocument,
    "mutation UpdateService($updateServiceInput: UpdateServiceDto!) {\n  updateService(updateServiceInput: $updateServiceInput) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateServiceDocument,
    "mutation createHostelSettings($hostelId: Float!, $data: CreateHostelSettingsInput!) {\n  createSettings(hostelId: $hostelId, data: $data) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.CreateHostelSettingsDocument,
    "query getSettings($hostelId: Float!) {\n  getSettingsByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      active\n      allowBooking\n      allowMessages\n      allowPrivateFeedbacks\n      allowRating\n      currency\n      fontSize\n      visibility\n      allowComments\n    }\n    error {\n      message\n    }\n  }\n}": types.GetSettingsDocument,
    "mutation updateHostelSettings($Id: Float!, $data: UpdateHostelSettingsInput!) {\n  updateSettings(hostelSettingId: $Id, data: $data) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}": types.UpdateHostelSettingsDocument,
    "mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    id\n  }\n}": types.ForgotPasswordDocument,
    "mutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}": types.ResetPasswordDocument,
    "mutation resendVerificationMail($id: Float!) {\n  resendVerificationMail(id: $id)\n}": types.ResendVerificationMailDocument,
    "mutation VerifyEmail($token: VerifyEmailInput!) {\n  verifyEmail(input: $token) {\n    id\n  }\n}": types.VerifyEmailDocument,
    "mutation ConfirmBooking($bookingKey: String!) {\n  confirmBooking(bookingKey: $bookingKey) {\n    count\n  }\n}": types.ConfirmBookingDocument,
    "query GetBookingByKey($bookingKey: String!) {\n  bookingsWithKey(bookingKey: $bookingKey) {\n    data {\n      id\n      roomId\n      bookingKey\n      guestId\n      startDate\n      endDate\n      status\n      createdAt\n      updatedAt\n      room {\n        id\n        status\n        capacity\n        caption\n        roomNumber\n        attachBathroom\n        hostelId\n        createdAt\n        updatedAt\n        image {\n          url\n          caption\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n        }\n      }\n      guest {\n        id\n        email\n        fullName\n        phoneNumber\n        isVerified\n        userType\n        createdAt\n        updatedAt\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetBookingByKeyDocument,
    "mutation CreateHostelSearchForm($createHostelSearchFormInput: CreateHostelSearchFormInput!) {\n  createHostelSearchForm(data: $createHostelSearchFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateHostelSearchFormDocument,
    "mutation CreateHostelSellForm($createHostelSellFormInput: CreateHostelSellFormInput!) {\n  createHostelSellForm(data: $createHostelSellFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateHostelSellFormDocument,
    "mutation CreateHostelApplicationForm($createHostelApplicationFormInput: CreateHostelApplicationFormInput!) {\n  createHostelApplicationForm(data: $createHostelApplicationFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateHostelApplicationFormDocument,
    "query CheckValidBooking($roomIds: [Int!]!, $startDate: DateTime!, $endDate: DateTime!) {\n  checkValidBooking(roomIds: $roomIds, startDate: $startDate, endDate: $endDate) {\n    isValid\n    message\n    totalPrice\n    totalDays\n    bookingSummary {\n      roomId\n      price\n      totalPriceOfRoom\n      priceType\n    }\n  }\n}": types.CheckValidBookingDocument,
    "query FindRoomsByRoomIds($roomIds: [Int!]!) {\n  findRoomsByRoomIds(roomIds: $roomIds) {\n    roomNumbers\n    name\n  }\n}": types.FindRoomsByRoomIdsDocument,
    "mutation SendMmailAfterBooking($email: String!, $data: BookingConfirmationEmailDto!) {\n  sendMailAfterBooking(email: $email, data: $data)\n}": types.SendMmailAfterBookingDocument,
    "query getHostelBySlug($slug: String!) {\n  getHostelBySlug(slug: $slug) {\n    data {\n      id\n      name\n      description\n      admissionFee\n      depositAmount\n      slug\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      service {\n        services\n      }\n      hostelRules {\n        rules\n      }\n      gallery {\n        url\n        isSelected\n      }\n      address {\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      contact {\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        caption\n        capacity\n        roomNumber\n        description\n        status\n        roomAmenity {\n          amenity\n        }\n        image {\n          url\n          id\n          caption\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          isDynamicPricing\n          discountAmount\n          discountType\n        }\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetHostelBySlugDocument,
    "mutation logInUser($input: LoginInput!) {\n  loginUser(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}": types.LogInUserDocument,
    "query getSearchQueries($query: String!) {\n  searchQueries(query: $query) {\n    data {\n      country\n      city\n      subCity\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetSearchQueriesDocument,
    "query searchHostel($input: SearchHostelInput!) {\n  getHostelsBySearch(input: $input) {\n    data {\n      name\n      description\n      hostelType\n      genderType\n      address {\n        city\n        country\n        subCity\n        street\n        latitude\n        longitude\n      }\n      rooms {\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n        }\n        image {\n          url\n          id\n        }\n      }\n      contact {\n        phone\n        email\n        altPhone\n      }\n      gallery {\n        url\n      }\n      slug\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.SearchHostelDocument,
    "query getGoogleOauthUrl {\n  getGoogleAuthUrl {\n    url\n  }\n}": types.GetGoogleOauthUrlDocument,
    "mutation logOut {\n  logout {\n    success\n    message\n  }\n}": types.LogOutDocument,
    "mutation refreshToken {\n  refreshTokens {\n    user {\n      email\n      fullName\n      id\n      userType\n      hostelId\n    }\n    token {\n      refreshToken\n      accessToken\n    }\n  }\n}": types.RefreshTokenDocument,
    "mutation signupUser($input: SignupInput!) {\n  signupUser(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}": types.SignupUserDocument,
    "mutation signUpWithGoogle($input: SignupWithGoogleInput!) {\n  signUpWithGoogle(input: $input) {\n    id\n    email\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}": types.SignUpWithGoogleDocument,
    "mutation getTravelBudget($input: TravelBudgetCalculatorInput!) {\n  getTravelBudget(input: $input) {\n    personalizedTravelGuide\n    data {\n      category\n      cost\n      currency\n      per\n      shortGuide\n    }\n  }\n}": types.GetTravelBudgetDocument,
    "mutation getTravelDestination($input: TravelDestinationFinderInput!) {\n  getTravelDestination(input: $input) {\n    personalizedTravelGuide\n    data {\n      activitiesToDo\n      destinationCountry\n      destinationPlace\n      expectedCost\n      shortGuide\n    }\n  }\n}": types.GetTravelDestinationDocument,
    "mutation SendCustomEmail($email: String!, $name: String!, $subject: String!, $htmlContent: String!) {\n  sendCustomEmail(\n    email: $email\n    name: $name\n    subject: $subject\n    htmlContent: $htmlContent\n  )\n}": types.SendCustomEmailDocument,
    "mutation completeOnboarding {\n  completeOnboarding {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CompleteOnboardingDocument,
    "query getOnboardingData {\n  getOnboardingData {\n    data {\n      address {\n        id\n      }\n      contact {\n        id\n      }\n      amenities {\n        id\n      }\n      gallery {\n        id\n      }\n      rooms {\n        id\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetOnboardingDataDocument,
    "mutation CreateAmenity($createAmenityInput: CreateAmenityInput!) {\n  createAmenity(createAmenityInput: $createAmenityInput) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.CreateAmenityDocument,
    "query FindAmenityByHostelId($hostelId: Int!) {\n  findAmenityByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.FindAmenityByHostelIdDocument,
    "mutation RemoveAmenity($id: Int!) {\n  removeAmenity(id: $id) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.RemoveAmenityDocument,
    "mutation UpdateAmenity($updateAmenityInput: UpdateAmenityInput!) {\n  updateAmenity(updateAmenityInput: $updateAmenityInput) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.UpdateAmenityDocument,
    "query GetFeaturedHostels($pageSize: Int!) {\n  getAllHostels(pageSize: $pageSize) {\n    data {\n      id\n      name\n      genderType\n      description\n      slug\n      address {\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      gallery {\n        url\n        caption\n        isSelected\n      }\n      rooms {\n        id\n        caption\n        capacity\n        roomNumber\n        status\n        createdAt\n        updatedAt\n        hostelId\n        image {\n          url\n          id\n          caption\n          createdAt\n          updatedAt\n          roomId\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          isDynamicPricing\n          discountAmount\n          discountType\n        }\n      }\n      service {\n        services\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}": types.GetFeaturedHostelsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createAmenityOption($createAmenityOptionInput: CreateAmenityOptionInput!) {\n  createAmenityOption(createAmenityOptionInput: $createAmenityOptionInput) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation createAmenityOption($createAmenityOptionInput: CreateAmenityOptionInput!) {\n  createAmenityOption(createAmenityOptionInput: $createAmenityOptionInput) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation deleteAmenityOption($id: Int!) {\n  deleteAmenityOption(amenityOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation deleteAmenityOption($id: Int!) {\n  deleteAmenityOption(amenityOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllAmenitiesOption {\n  amenityOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n      hostelAmenityType\n    }\n    error {\n      code\n    }\n  }\n}"): (typeof documents)["query AllAmenitiesOption {\n  amenityOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n      hostelAmenityType\n    }\n    error {\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateAmenityOption($id: Int!, $updateAmenityOptionInput: UpdateAmenityOptionInput!) {\n  updateAmenityOption(\n    amenityOptionId: $id\n    updateAmenityOptionInput: $updateAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation updateAmenityOption($id: Int!, $updateAmenityOptionInput: UpdateAmenityOptionInput!) {\n  updateAmenityOption(\n    amenityOptionId: $id\n    updateAmenityOptionInput: $updateAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllHostelApplicationFormsByUserId($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getHostelApplicationFormsByUserId(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      hostel {\n        id\n        name\n        genderType\n        name\n        slug\n        contact {\n          phone\n          altPhone\n          email\n        }\n        address {\n          street\n          subCity\n          city\n          country\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["query GetAllHostelApplicationFormsByUserId($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getHostelApplicationFormsByUserId(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      hostel {\n        id\n        name\n        genderType\n        name\n        slug\n        contact {\n          phone\n          altPhone\n          email\n        }\n        address {\n          street\n          subCity\n          city\n          country\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllHostelApplicationForms($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getAllHostelApplicationForms(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      user {\n        id\n        fullName\n        email\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["query GetAllHostelApplicationForms($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getAllHostelApplicationForms(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      user {\n        id\n        fullName\n        email\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllHostelApplicationFormsByHostelId($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getAllHostelApplicationFormsByHostelId(\n    pageSize: $pageSize\n    pageNumber: $pageNumber\n  ) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      user {\n        id\n        fullName\n        email\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["query GetAllHostelApplicationFormsByHostelId($pageSize: Int = 50, $pageNumber: Int = 1) {\n  getAllHostelApplicationFormsByHostelId(\n    pageSize: $pageSize\n    pageNumber: $pageNumber\n  ) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      institutionName\n      permanentAddress\n      askForDiscount\n      discountPercentage\n      notes\n      status\n      hostelId\n      userId\n      checkinDate\n      checkoutDate\n      roomCapacity\n      user {\n        id\n        fullName\n        email\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateHostelApplicationForm($data: UpdateHostelApplicationFormInput!) {\n  updateHostelApplicationForm(data: $data) {\n    data {\n      id\n      fullName\n      email\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation UpdateHostelApplicationForm($data: UpdateHostelApplicationFormInput!) {\n  updateHostelApplicationForm(data: $data) {\n    data {\n      id\n      fullName\n      email\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateBlogPost($createBlogPostInput: CreateBlogPostInput!) {\n  createBlogPost(data: $createBlogPostInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateBlogPost($createBlogPostInput: CreateBlogPostInput!) {\n  createBlogPost(data: $createBlogPostInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation deleteBlogPost($id: Float!) {\n  deleteBlogPost(id: $id) {\n    data {\n      id\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation deleteBlogPost($id: Float!) {\n  deleteBlogPost(id: $id) {\n    data {\n      id\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBlogPostBySlug($slug: String!) {\n  getBlogPostBySlug(slug: $slug) {\n    data {\n      id\n      title\n      slug\n      excerpt\n      content\n      coverImageUrl\n      metaTitle\n      metaDescription\n      metaKeywords\n      status\n      views\n      publishedAt\n      tags\n      videoUrl\n      oneLiner\n      updatedAt\n      createdAt\n      authorId\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetBlogPostBySlug($slug: String!) {\n  getBlogPostBySlug(slug: $slug) {\n    data {\n      id\n      title\n      slug\n      excerpt\n      content\n      coverImageUrl\n      metaTitle\n      metaDescription\n      metaKeywords\n      status\n      views\n      publishedAt\n      tags\n      videoUrl\n      oneLiner\n      updatedAt\n      createdAt\n      authorId\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBlogPosts($blogTags: [BlogTags!]) {\n  getAllBlogPosts(blogTags: $blogTags) {\n    data {\n      id\n      title\n      slug\n      excerpt\n      coverImageUrl\n      metaTitle\n      metaDescription\n      metaKeywords\n      status\n      views\n      publishedAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["query GetBlogPosts($blogTags: [BlogTags!]) {\n  getAllBlogPosts(blogTags: $blogTags) {\n    data {\n      id\n      title\n      slug\n      excerpt\n      coverImageUrl\n      metaTitle\n      metaDescription\n      metaKeywords\n      status\n      views\n      publishedAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateBlogPost($updateBlogPostInput: UpdateBlogPostInput!) {\n  updateBlogPost(data: $updateBlogPostInput) {\n    data {\n      id\n      title\n      content\n      slug\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdateBlogPost($updateBlogPostInput: UpdateBlogPostInput!) {\n  updateBlogPost(data: $updateBlogPostInput) {\n    data {\n      id\n      title\n      content\n      slug\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BookingsByHostel {\n  bookingsByHostel {\n    data {\n      id\n      bookingKey\n      startDate\n      endDate\n      status\n      createdAt\n      updatedAt\n      room {\n        id\n        caption\n        roomNumber\n        capacity\n        status\n        attachBathroom\n        maxOccupancy\n        price {\n          baseAmountPerDay\n          currency\n          discountAmount\n          discountType\n          isDiscountActive\n        }\n        image {\n          url\n          caption\n        }\n      }\n      guest {\n        id\n        email\n        fullName\n        phoneNumber\n      }\n    }\n    error {\n      message\n      code\n      path\n    }\n  }\n}"): (typeof documents)["query BookingsByHostel {\n  bookingsByHostel {\n    data {\n      id\n      bookingKey\n      startDate\n      endDate\n      status\n      createdAt\n      updatedAt\n      room {\n        id\n        caption\n        roomNumber\n        capacity\n        status\n        attachBathroom\n        maxOccupancy\n        price {\n          baseAmountPerDay\n          currency\n          discountAmount\n          discountType\n          isDiscountActive\n        }\n        image {\n          url\n          caption\n        }\n      }\n      guest {\n        id\n        email\n        fullName\n        phoneNumber\n      }\n    }\n    error {\n      message\n      code\n      path\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getAllHostelSearchForms {\n  getAllHostelSearchForms {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      occupation\n      hostelType\n      hostelGenderType\n      roomCapacity\n      checkinDate\n      checkoutDate\n      notes\n      isActive\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n        hostelId\n        hostelSearchFormId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["query getAllHostelSearchForms {\n  getAllHostelSearchForms {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      occupation\n      hostelType\n      hostelGenderType\n      roomCapacity\n      checkinDate\n      checkoutDate\n      notes\n      isActive\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n        hostelId\n        hostelSearchFormId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getAllHostelSearchFormsByUserId {\n  getHostelSearchFormsByUserId {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      occupation\n      hostelType\n      hostelGenderType\n      roomCapacity\n      checkinDate\n      checkoutDate\n      notes\n      isActive\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n        hostelId\n        hostelSearchFormId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["query getAllHostelSearchFormsByUserId {\n  getHostelSearchFormsByUserId {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      occupation\n      hostelType\n      hostelGenderType\n      roomCapacity\n      checkinDate\n      checkoutDate\n      notes\n      isActive\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n        hostelId\n        hostelSearchFormId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateHostelSearchForm($data: UpdateHostelSearchFormInput!) {\n  updateHostelSearchForm(data: $data) {\n    data {\n      id\n      email\n    }\n  }\n}"): (typeof documents)["mutation updateHostelSearchForm($data: UpdateHostelSearchFormInput!) {\n  updateHostelSearchForm(data: $data) {\n    data {\n      id\n      email\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation selectGallery($galleryId: Int!, $hostelId: Int!) {\n  selectGallery(galleryId: $galleryId, hostelId: $hostelId) {\n    data {\n      id\n      caption\n      url\n      isSelected\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation selectGallery($galleryId: Int!, $hostelId: Int!) {\n  selectGallery(galleryId: $galleryId, hostelId: $hostelId) {\n    data {\n      id\n      caption\n      url\n      isSelected\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getHostelDetailsBasic {\n  getHostelByToken {\n    data {\n      name\n      slug\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      hasOnboardingComplete\n      hostelType\n      address {\n        country\n        city\n        subCity\n        street\n      }\n    }\n  }\n}"): (typeof documents)["query getHostelDetailsBasic {\n  getHostelByToken {\n    data {\n      name\n      slug\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      hasOnboardingComplete\n      hostelType\n      address {\n        country\n        city\n        subCity\n        street\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateHostelGuest($createHostelGuestInput: CreateHostelGuestInput!, $withWelcomeEmail: Boolean!, $allowEdit: Boolean!) {\n  createHostelGuest(\n    createHostelGuestInput: $createHostelGuestInput\n    withWelcomeEmail: $withWelcomeEmail\n    allowEdit: $allowEdit\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation CreateHostelGuest($createHostelGuestInput: CreateHostelGuestInput!, $withWelcomeEmail: Boolean!, $allowEdit: Boolean!) {\n  createHostelGuest(\n    createHostelGuestInput: $createHostelGuestInput\n    withWelcomeEmail: $withWelcomeEmail\n    allowEdit: $allowEdit\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RemoveHostelGuest($id: Int!) {\n  removeHostelGuest(id: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation RemoveHostelGuest($id: Int!) {\n  removeHostelGuest(id: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getHostelGuests {\n  hostelGuestsByHostelId {\n    data {\n      id\n      hostelId\n      roomId\n      fullName\n      email\n      phoneNumber\n      emergencyContact\n      gender\n      dateOfBirth\n      nationality\n      permanentAddress\n      religion\n      occupation\n      profilePicture\n      checkinDate\n      checkoutDate\n      notes\n      isEditable\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["query getHostelGuests {\n  hostelGuestsByHostelId {\n    data {\n      id\n      hostelId\n      roomId\n      fullName\n      email\n      phoneNumber\n      emergencyContact\n      gender\n      dateOfBirth\n      nationality\n      permanentAddress\n      religion\n      occupation\n      profilePicture\n      checkinDate\n      checkoutDate\n      notes\n      isEditable\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getHostelGuestWithToken($token: String!) {\n  hostelGuestByToken(token: $token) {\n    data {\n      id\n      hostelId\n      roomId\n      fullName\n      email\n      phoneNumber\n      emergencyContact\n      gender\n      dateOfBirth\n      nationality\n      permanentAddress\n      religion\n      occupation\n      profilePicture\n      checkinDate\n      checkoutDate\n      notes\n      isEditable\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["query getHostelGuestWithToken($token: String!) {\n  hostelGuestByToken(token: $token) {\n    data {\n      id\n      hostelId\n      roomId\n      fullName\n      email\n      phoneNumber\n      emergencyContact\n      gender\n      dateOfBirth\n      nationality\n      permanentAddress\n      religion\n      occupation\n      profilePicture\n      checkinDate\n      checkoutDate\n      notes\n      isEditable\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateHostelGuest($updateHostelGuestInput: UpdateHostelGuestInput!, $withWelcomeEmail: Boolean!, $allowEdit: Boolean!) {\n  updateHostelGuest(\n    updateHostelGuestInput: $updateHostelGuestInput\n    withWelcomeEmail: $withWelcomeEmail\n    allowEdit: $allowEdit\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation UpdateHostelGuest($updateHostelGuestInput: UpdateHostelGuestInput!, $withWelcomeEmail: Boolean!, $allowEdit: Boolean!) {\n  updateHostelGuest(\n    updateHostelGuestInput: $updateHostelGuestInput\n    withWelcomeEmail: $withWelcomeEmail\n    allowEdit: $allowEdit\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateGallery($data: CreateGalleryInput!) {\n  createGallery(data: $data) {\n    data {\n      id\n      hostelId\n      url\n      caption\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateGallery($data: CreateGalleryInput!) {\n  createGallery(data: $data) {\n    data {\n      id\n      hostelId\n      url\n      caption\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DeleteGallery($galleryId: Int!) {\n  deleteGallery(galleryId: $galleryId) {\n    data {\n      id\n      hostelId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation DeleteGallery($galleryId: Int!) {\n  deleteGallery(galleryId: $galleryId) {\n    data {\n      id\n      hostelId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetGalleryByHostelId($hostelId: Int!) {\n  getGalleryByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      hostelId\n      url\n      type\n      caption\n      isSelected\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["query GetGalleryByHostelId($hostelId: Int!) {\n  getGalleryByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      hostelId\n      url\n      type\n      caption\n      isSelected\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateGallery($galleryId: Int!, $data: UpdateGalleryInput!) {\n  updateGallery(galleryId: $galleryId, data: $data) {\n    data {\n      id\n      hostelId\n      url\n      isSelected\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdateGallery($galleryId: Int!, $data: UpdateGalleryInput!) {\n  updateGallery(galleryId: $galleryId, data: $data) {\n    data {\n      id\n      hostelId\n      url\n      isSelected\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createAddress($input: CreateAddressInput!) {\n  createAddress(data: $input) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation createAddress($input: CreateAddressInput!) {\n  createAddress(data: $input) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createContacts($input: CreateContactInput!) {\n  createContact(data: $input) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation createContacts($input: CreateContactInput!) {\n  createContact(data: $input) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createHostel($input: CreateHostelInput!) {\n  createHostel(data: $input) {\n    data {\n      id\n      ownerId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation createHostel($input: CreateHostelInput!) {\n  createHostel(data: $input) {\n    data {\n      id\n      ownerId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createOnboardingHostel($input: CreateOnboardingHostelInput!) {\n  createOnboardingHostel(data: $input) {\n    data {\n      id\n      ownerId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation createOnboardingHostel($input: CreateOnboardingHostelInput!) {\n  createOnboardingHostel(data: $input) {\n    data {\n      id\n      ownerId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getAddressByHostelId($hostelId: Float!) {\n  getAddressByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      country\n      city\n      subCity\n      street\n      latitude\n      longitude\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getAddressByHostelId($hostelId: Float!) {\n  getAddressByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      country\n      city\n      subCity\n      street\n      latitude\n      longitude\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getContactsByHostelId($hostelId: Float!) {\n  getContactByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      email\n      phone\n      altPhone\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getContactsByHostelId($hostelId: Float!) {\n  getContactByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      email\n      phone\n      altPhone\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getHostelByToken {\n  getHostelByToken {\n    data {\n      id\n      name\n      description\n      slug\n      hostelType\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      hasOnboardingComplete\n      admissionFee\n      depositAmount\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getHostelByToken {\n  getHostelByToken {\n    data {\n      id\n      name\n      description\n      slug\n      hostelType\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      hasOnboardingComplete\n      admissionFee\n      depositAmount\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateAddress($input: UpdateAddressInput!, $addressId: Float!) {\n  updateAddress(data: $input, addressId: $addressId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation updateAddress($input: UpdateAddressInput!, $addressId: Float!) {\n  updateAddress(data: $input, addressId: $addressId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateContact($input: UpdateContactInput!, $contactId: Float!) {\n  updateContact(data: $input, contactId: $contactId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation updateContact($input: UpdateContactInput!, $contactId: Float!) {\n  updateContact(data: $input, contactId: $contactId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateHostel($input: UpdateHostelInput!, $hostelId: Float!) {\n  updateHostel(data: $input, hostelId: $hostelId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation updateHostel($input: UpdateHostelInput!, $hostelId: Float!) {\n  updateHostel(data: $input, hostelId: $hostelId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllHostels($pageSize: Int, $pageNumber: Int, $isSuperAdmin: Boolean) {\n  getAllHostels(\n    pageSize: $pageSize\n    pageNumber: $pageNumber\n    isSuperAdmin: $isSuperAdmin\n  ) {\n    data {\n      id\n      name\n      description\n      slug\n      verifiedByCommunityOwner\n      verifiedBySuperAdmin\n      ownerId\n      createdAt\n      updatedAt\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      owner {\n        email\n        fullName\n      }\n      contact {\n        id\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        status\n        capacity\n        caption\n        description\n        roomNumber\n        maxOccupancy\n        attachBathroom\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          discountAmount\n          discountType\n          isDynamicPricing\n          isDiscountActive\n        }\n        image {\n          id\n          caption\n          url\n        }\n      }\n      gallery {\n        id\n        caption\n        url\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetAllHostels($pageSize: Int, $pageNumber: Int, $isSuperAdmin: Boolean) {\n  getAllHostels(\n    pageSize: $pageSize\n    pageNumber: $pageNumber\n    isSuperAdmin: $isSuperAdmin\n  ) {\n    data {\n      id\n      name\n      description\n      slug\n      verifiedByCommunityOwner\n      verifiedBySuperAdmin\n      ownerId\n      createdAt\n      updatedAt\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      owner {\n        email\n        fullName\n      }\n      contact {\n        id\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        status\n        capacity\n        caption\n        description\n        roomNumber\n        maxOccupancy\n        attachBathroom\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          discountAmount\n          discountType\n          isDynamicPricing\n          isDiscountActive\n        }\n        image {\n          id\n          caption\n          url\n        }\n      }\n      gallery {\n        id\n        caption\n        url\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation VerifyHostel($hostelId: Int!, $status: Boolean!) {\n  verifyHostel(hostelId: $hostelId, status: $status) {\n    data {\n      id\n      name\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation VerifyHostel($hostelId: Int!, $status: Boolean!) {\n  verifyHostel(hostelId: $hostelId, status: $status) {\n    data {\n      id\n      name\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllHostelServices {\n  getAllHostelServices {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n      dueDate\n      completionDate\n      createdAt\n      hostel {\n        name\n      }\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["query GetAllHostelServices {\n  getAllHostelServices {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n      dueDate\n      completionDate\n      createdAt\n      hostel {\n        name\n      }\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ChangeCurrentHostel($hostelId: Int!) {\n  changeCurrentHostel(hostelId: $hostelId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation ChangeCurrentHostel($hostelId: Int!) {\n  changeCurrentHostel(hostelId: $hostelId) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllListingsByUserId($pageSize: Int, $pageNumber: Int) {\n  getHostelsByUserToken(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      name\n      description\n      slug\n      verifiedByCommunityOwner\n      verifiedBySuperAdmin\n      ownerId\n      createdAt\n      updatedAt\n      admissionFee\n      depositAmount\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      owner {\n        email\n        fullName\n      }\n      contact {\n        id\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        status\n        capacity\n        caption\n        description\n        roomNumber\n        maxOccupancy\n        attachBathroom\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          discountAmount\n          discountType\n          isDynamicPricing\n          isDiscountActive\n        }\n        image {\n          id\n          caption\n          url\n        }\n      }\n      gallery {\n        id\n        caption\n        url\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetAllListingsByUserId($pageSize: Int, $pageNumber: Int) {\n  getHostelsByUserToken(pageSize: $pageSize, pageNumber: $pageNumber) {\n    data {\n      id\n      name\n      description\n      slug\n      verifiedByCommunityOwner\n      verifiedBySuperAdmin\n      ownerId\n      createdAt\n      updatedAt\n      admissionFee\n      depositAmount\n      address {\n        id\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      owner {\n        email\n        fullName\n      }\n      contact {\n        id\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        status\n        capacity\n        caption\n        description\n        roomNumber\n        maxOccupancy\n        attachBathroom\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          discountAmount\n          discountType\n          isDynamicPricing\n          isDiscountActive\n        }\n        image {\n          id\n          caption\n          url\n        }\n      }\n      gallery {\n        id\n        caption\n        url\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ChangePassword($userId: Float!, $input: ChangePasswordInput!) {\n  changePassword(userId: $userId, input: $input)\n}"): (typeof documents)["mutation ChangePassword($userId: Float!, $input: ChangePasswordInput!) {\n  changePassword(userId: $userId, input: $input)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getUserById($id: Float!) {\n  getUserById(id: $id) {\n    data {\n      id\n      isVerified\n      fullName\n      email\n      phoneNumber\n      altPhoneNumber\n      city\n      gender\n      dateOfBirth\n      profilePicture\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getUserById($id: Float!) {\n  getUserById(id: $id) {\n    data {\n      id\n      isVerified\n      fullName\n      email\n      phoneNumber\n      altPhoneNumber\n      city\n      gender\n      dateOfBirth\n      profilePicture\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MyBookings {\n  myBookings {\n    data {\n      id\n      roomId\n      bookingKey\n      guestId\n      startDate\n      endDate\n      status\n      paymentPlatformName\n      createdAt\n      updatedAt\n      room {\n        id\n        roomNumber\n        capacity\n        caption\n        status\n        attachBathroom\n        maxOccupancy\n        price {\n          currency\n          baseAmountPerDay\n          baseAmountPerMonth\n        }\n      }\n      guest {\n        id\n        fullName\n        email\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query MyBookings {\n  myBookings {\n    data {\n      id\n      roomId\n      bookingKey\n      guestId\n      startDate\n      endDate\n      status\n      paymentPlatformName\n      createdAt\n      updatedAt\n      room {\n        id\n        roomNumber\n        capacity\n        caption\n        status\n        attachBathroom\n        maxOccupancy\n        price {\n          currency\n          baseAmountPerDay\n          baseAmountPerMonth\n        }\n      }\n      guest {\n        id\n        fullName\n        email\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      altPhoneNumber\n      city\n      gender\n      dateOfBirth\n      profilePicture\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation updateUser($input: UpdateUserInput!) {\n  updateUser(input: $input) {\n    data {\n      id\n      fullName\n      email\n      phoneNumber\n      altPhoneNumber\n      city\n      gender\n      dateOfBirth\n      profilePicture\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createHostelService($data: CreateHostelServiceDto!) {\n  createHostelService(input: $data) {\n    data {\n      budget\n      description\n      id\n      title\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation createHostelService($data: CreateHostelServiceDto!) {\n  createHostelService(input: $data) {\n    data {\n      budget\n      description\n      id\n      title\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DeleteHostelServicesById($id: Float!) {\n  deleteHostelService(id: $id) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation DeleteHostelServicesById($id: Float!) {\n  deleteHostelService(id: $id) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetHostelServicesByHostelId($hostelId: Float!) {\n  getHostelServicesByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n      dueDate\n      completionDate\n      createdAt\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["query GetHostelServicesByHostelId($hostelId: Float!) {\n  getHostelServicesByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n      dueDate\n      completionDate\n      createdAt\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetHostelServicesById($id: Float!) {\n  getHostelServiceById(id: $id) {\n    data {\n      id\n      title\n      description\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["query GetHostelServicesById($id: Float!) {\n  getHostelServiceById(id: $id) {\n    data {\n      id\n      title\n      description\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateHostelServicesById($input: UpdateHostelServiceDto!) {\n  updateHostelService(input: $input) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation UpdateHostelServicesById($input: UpdateHostelServiceDto!) {\n  updateHostelService(input: $input) {\n    data {\n      id\n      title\n      description\n      hostelServiceType\n      priority\n      status\n      budget\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createRoomAmenityOption($createRoomAmenityOptionInput: CreateRoomAmenityOptionInput!) {\n  createRoomAmenityOption(\n    createRoomAmenityOptionInput: $createRoomAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation createRoomAmenityOption($createRoomAmenityOptionInput: CreateRoomAmenityOptionInput!) {\n  createRoomAmenityOption(\n    createRoomAmenityOptionInput: $createRoomAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation deleteRoomAmenityOption($id: Int!) {\n  deleteRoomAmenityOption(roomAmenityOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation deleteRoomAmenityOption($id: Int!) {\n  deleteRoomAmenityOption(roomAmenityOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllRoomAmenitiesOption {\n  roomAmenityOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n    }\n    error {\n      code\n    }\n  }\n}"): (typeof documents)["query AllRoomAmenitiesOption {\n  roomAmenityOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n    }\n    error {\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateRoomAmenityOption($id: Int!, $updateRoomAmenityOptionInput: UpdateRoomAmenityOptionInput!) {\n  updateRoomAmenityOption(\n    roomAmenityOptionId: $id\n    updateRoomAmenityOptionInput: $updateRoomAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation updateRoomAmenityOption($id: Int!, $updateRoomAmenityOptionInput: UpdateRoomAmenityOptionInput!) {\n  updateRoomAmenityOption(\n    roomAmenityOptionId: $id\n    updateRoomAmenityOptionInput: $updateRoomAmenityOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreatePriceRule($createPriceRuleInput: CreateDynamicPriceRuleInput!) {\n  createPriceRule(createPriceRuleInput: $createPriceRuleInput) {\n    data {\n      id\n      name\n      description\n      roomId\n      startDate\n      endDate\n      amount\n      isWeekend\n      isActive\n      priority\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation CreatePriceRule($createPriceRuleInput: CreateDynamicPriceRuleInput!) {\n  createPriceRule(createPriceRuleInput: $createPriceRuleInput) {\n    data {\n      id\n      name\n      description\n      roomId\n      startDate\n      endDate\n      amount\n      isWeekend\n      isActive\n      priority\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RemovePriceRule($id: Int!) {\n  removePriceRule(id: $id) {\n    data {\n      id\n      name\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation RemovePriceRule($id: Int!) {\n  removePriceRule(id: $id) {\n    data {\n      id\n      name\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPriceRulesByRoom($roomId: Int!) {\n  priceRulesByRoom(roomId: $roomId) {\n    data {\n      id\n      name\n      description\n      amount\n      startDate\n      endDate\n      isWeekend\n      isActive\n      priority\n    }\n  }\n}"): (typeof documents)["query GetPriceRulesByRoom($roomId: Int!) {\n  priceRulesByRoom(roomId: $roomId) {\n    data {\n      id\n      name\n      description\n      amount\n      startDate\n      endDate\n      isWeekend\n      isActive\n      priority\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdatePriceRule($updatePriceInput: UpdateDynamicPriceRuleInput!) {\n  updatePriceRule(updatePriceInput: $updatePriceInput) {\n    data {\n      id\n      name\n      description\n      roomId\n      startDate\n      endDate\n      amount\n      isWeekend\n      isActive\n      priority\n      updatedAt\n    }\n  }\n}"): (typeof documents)["mutation UpdatePriceRule($updatePriceInput: UpdateDynamicPriceRuleInput!) {\n  updatePriceRule(updatePriceInput: $updatePriceInput) {\n    data {\n      id\n      name\n      description\n      roomId\n      startDate\n      endDate\n      amount\n      isWeekend\n      isActive\n      priority\n      updatedAt\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateRoomImage($data: CreateRoomImageInput!) {\n  createRoomImage(data: $data) {\n    data {\n      id\n      roomId\n      url\n      caption\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateRoomImage($data: CreateRoomImageInput!) {\n  createRoomImage(data: $data) {\n    data {\n      id\n      roomId\n      url\n      caption\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DeleteRoomImage($roomImageId: Int!) {\n  deleteRoomImage(roomImageId: $roomImageId) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation DeleteRoomImage($roomImageId: Int!) {\n  deleteRoomImage(roomImageId: $roomImageId) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetRoomImagesByRoomId($roomId: Int!) {\n  getRoomImagesByRoomId(roomId: $roomId) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetRoomImagesByRoomId($roomId: Int!) {\n  getRoomImagesByRoomId(roomId: $roomId) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateRoomImage($roomImageId: Int!, $data: UpdateRoomImageInput!) {\n  updateRoomImage(roomImageId: $roomImageId, data: $data) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdateRoomImage($roomImageId: Int!, $data: UpdateRoomImageInput!) {\n  updateRoomImage(roomImageId: $roomImageId, data: $data) {\n    data {\n      id\n      roomId\n      url\n      caption\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreatePrice($createPriceInput: CreatePriceInput!) {\n  createPrice(createPriceInput: $createPriceInput) {\n    data {\n      id\n      baseAmountPerDay\n      baseAmountPerMonth\n      currency\n      roomId\n      isDynamicPricing\n      discountAmount\n      discountType\n      isDiscountActive\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreatePrice($createPriceInput: CreatePriceInput!) {\n  createPrice(createPriceInput: $createPriceInput) {\n    data {\n      id\n      baseAmountPerDay\n      baseAmountPerMonth\n      currency\n      roomId\n      isDynamicPricing\n      discountAmount\n      discountType\n      isDiscountActive\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateRoom($createRoomInput: CreateRoomInput!) {\n  createRoom(createRoomInput: $createRoomInput) {\n    data {\n      id\n      status\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateRoom($createRoomInput: CreateRoomInput!) {\n  createRoom(createRoomInput: $createRoomInput) {\n    data {\n      id\n      status\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateRoomAmenity($createAmenityInput: CreateRoomAmenityInput!) {\n  createRoomAmenity(createAmenityInput: $createAmenityInput) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateRoomAmenity($createAmenityInput: CreateRoomAmenityInput!) {\n  createRoomAmenity(createAmenityInput: $createAmenityInput) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation deleteRoom($id: Int!) {\n  removeRoom(id: $id) {\n    data {\n      id\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation deleteRoom($id: Int!) {\n  removeRoom(id: $id) {\n    data {\n      id\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FindAllAmenities {\n  findAllAmenities {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query FindAllAmenities {\n  findAllAmenities {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FindAnAmenityById($id: Int!) {\n  findAnAmenityById(id: $id) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query FindAnAmenityById($id: Int!) {\n  findAnAmenityById(id: $id) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FindAmenityByRoomId($roomId: Int!) {\n  findAmenityByRoomId(roomId: $roomId) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query FindAmenityByRoomId($roomId: Int!) {\n  findAmenityByRoomId(roomId: $roomId) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetRoomWithPriceAndGallery($id: Int!) {\n  room(id: $id) {\n    data {\n      id\n      status\n      capacity\n      description\n      caption\n      maxOccupancy\n      roomNumber\n      attachBathroom\n      hostelId\n      createdAt\n      updatedAt\n      image {\n        id\n        caption\n        url\n        roomId\n        createdAt\n        updatedAt\n      }\n      price {\n        id\n        baseAmountPerDay\n        baseAmountPerMonth\n        currency\n        discountAmount\n        discountType\n        isDiscountActive\n        isDynamicPricing\n        createdAt\n        updatedAt\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetRoomWithPriceAndGallery($id: Int!) {\n  room(id: $id) {\n    data {\n      id\n      status\n      capacity\n      description\n      caption\n      maxOccupancy\n      roomNumber\n      attachBathroom\n      hostelId\n      createdAt\n      updatedAt\n      image {\n        id\n        caption\n        url\n        roomId\n        createdAt\n        updatedAt\n      }\n      price {\n        id\n        baseAmountPerDay\n        baseAmountPerMonth\n        currency\n        discountAmount\n        discountType\n        isDiscountActive\n        isDynamicPricing\n        createdAt\n        updatedAt\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetRooms {\n  roomsByHostel {\n    data {\n      id\n      status\n      capacity\n      caption\n      roomNumber\n      attachBathroom\n      hostelId\n      image {\n        id\n        caption\n        url\n        roomId\n        createdAt\n        updatedAt\n      }\n      price {\n        id\n        currency\n        baseAmountPerDay\n        baseAmountPerMonth\n        isDynamicPricing\n        discountAmount\n        discountType\n        isDiscountActive\n        roomId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetRooms {\n  roomsByHostel {\n    data {\n      id\n      status\n      capacity\n      caption\n      roomNumber\n      attachBathroom\n      hostelId\n      image {\n        id\n        caption\n        url\n        roomId\n        createdAt\n        updatedAt\n      }\n      price {\n        id\n        currency\n        baseAmountPerDay\n        baseAmountPerMonth\n        isDynamicPricing\n        discountAmount\n        discountType\n        isDiscountActive\n        roomId\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RemoveRoomAmenity($roomAmenityId: Int!) {\n  removeRoomAmenity(roomAmenityId: $roomAmenityId) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation RemoveRoomAmenity($roomAmenityId: Int!) {\n  removeRoomAmenity(roomAmenityId: $roomAmenityId) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdatePrice($updatePriceInput: UpdatePriceInput!) {\n  updatePrice(updatePriceInput: $updatePriceInput) {\n    data {\n      id\n      baseAmountPerDay\n      baseAmountPerMonth\n      currency\n      isDynamicPricing\n      discountAmount\n      discountType\n      isDiscountActive\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdatePrice($updatePriceInput: UpdatePriceInput!) {\n  updatePrice(updatePriceInput: $updatePriceInput) {\n    data {\n      id\n      baseAmountPerDay\n      baseAmountPerMonth\n      currency\n      isDynamicPricing\n      discountAmount\n      discountType\n      isDiscountActive\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateRoom($updateRoomInput: UpdateRoomInput!) {\n  updateRoom(updateRoomInput: $updateRoomInput) {\n    data {\n      id\n      status\n      capacity\n      caption\n      roomNumber\n      attachBathroom\n      hostelId\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdateRoom($updateRoomInput: UpdateRoomInput!) {\n  updateRoom(updateRoomInput: $updateRoomInput) {\n    data {\n      id\n      status\n      capacity\n      caption\n      roomNumber\n      attachBathroom\n      hostelId\n      createdAt\n      updatedAt\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateRoomAmenity($updateAmenityInput: UpdateRoomAmenityInput!) {\n  updateRoomAmenity(updateAmenityInput: $updateAmenityInput) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdateRoomAmenity($updateAmenityInput: UpdateRoomAmenityInput!) {\n  updateRoomAmenity(updateAmenityInput: $updateAmenityInput) {\n    data {\n      id\n      roomId\n      amenity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createRules($input: CreateRulesInput!) {\n  createRules(createRulesInput: $input) {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation createRules($input: CreateRulesInput!) {\n  createRules(createRulesInput: $input) {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getRules {\n  getRulesByHostel {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getRules {\n  getRulesByHostel {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateRules($input: UpdateRulesInput!, $rulesId: Int!) {\n  updateRules(rulesId: $rulesId, updateRulesInput: $input) {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation updateRules($input: UpdateRulesInput!, $rulesId: Int!) {\n  updateRules(rulesId: $rulesId, updateRulesInput: $input) {\n    data {\n      id\n      rules\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createServiceOption($createServiceOptionInput: CreateServiceOptionInput!) {\n  createServiceOption(createServiceOptionInput: $createServiceOptionInput) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation createServiceOption($createServiceOptionInput: CreateServiceOptionInput!) {\n  createServiceOption(createServiceOptionInput: $createServiceOptionInput) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation deleteServiceOption($id: Int!) {\n  deleteServiceOption(serviceOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation deleteServiceOption($id: Int!) {\n  deleteServiceOption(serviceOptionId: $id) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllServiceOptions {\n  serviceOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n    }\n    error {\n      code\n    }\n  }\n}"): (typeof documents)["query AllServiceOptions {\n  serviceOptions {\n    data {\n      id\n      name\n      description\n      iconUrl\n    }\n    error {\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateServiceOption($id: Int!, $updateServiceOptionInput: UpdateServiceOptionInput!) {\n  updateServiceOption(\n    serviceOptionId: $id\n    updateServiceOptionInput: $updateServiceOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation updateServiceOption($id: Int!, $updateServiceOptionInput: UpdateServiceOptionInput!) {\n  updateServiceOption(\n    serviceOptionId: $id\n    updateServiceOptionInput: $updateServiceOptionInput\n  ) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetServiceByHostelId($hostelId: Float!) {\n  findServiceByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetServiceByHostelId($hostelId: Float!) {\n  findServiceByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateService($createServiceInput: CreateServiceDto!) {\n  createService(createServiceInput: $createServiceInput) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateService($createServiceInput: CreateServiceDto!) {\n  createService(createServiceInput: $createServiceInput) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RemoveService($id: Float!) {\n  removeService(id: $id) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation RemoveService($id: Float!) {\n  removeService(id: $id) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateService($updateServiceInput: UpdateServiceDto!) {\n  updateService(updateServiceInput: $updateServiceInput) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdateService($updateServiceInput: UpdateServiceDto!) {\n  updateService(updateServiceInput: $updateServiceInput) {\n    data {\n      id\n      services\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createHostelSettings($hostelId: Float!, $data: CreateHostelSettingsInput!) {\n  createSettings(hostelId: $hostelId, data: $data) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation createHostelSettings($hostelId: Float!, $data: CreateHostelSettingsInput!) {\n  createSettings(hostelId: $hostelId, data: $data) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getSettings($hostelId: Float!) {\n  getSettingsByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      active\n      allowBooking\n      allowMessages\n      allowPrivateFeedbacks\n      allowRating\n      currency\n      fontSize\n      visibility\n      allowComments\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["query getSettings($hostelId: Float!) {\n  getSettingsByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      active\n      allowBooking\n      allowMessages\n      allowPrivateFeedbacks\n      allowRating\n      currency\n      fontSize\n      visibility\n      allowComments\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateHostelSettings($Id: Float!, $data: UpdateHostelSettingsInput!) {\n  updateSettings(hostelSettingId: $Id, data: $data) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"): (typeof documents)["mutation updateHostelSettings($Id: Float!, $data: UpdateHostelSettingsInput!) {\n  updateSettings(hostelSettingId: $Id, data: $data) {\n    data {\n      id\n    }\n    error {\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    id\n  }\n}"): (typeof documents)["mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"): (typeof documents)["mutation ResetPassword($input: ResetPasswordInput!) {\n  resetPassword(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation resendVerificationMail($id: Float!) {\n  resendVerificationMail(id: $id)\n}"): (typeof documents)["mutation resendVerificationMail($id: Float!) {\n  resendVerificationMail(id: $id)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation VerifyEmail($token: VerifyEmailInput!) {\n  verifyEmail(input: $token) {\n    id\n  }\n}"): (typeof documents)["mutation VerifyEmail($token: VerifyEmailInput!) {\n  verifyEmail(input: $token) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ConfirmBooking($bookingKey: String!) {\n  confirmBooking(bookingKey: $bookingKey) {\n    count\n  }\n}"): (typeof documents)["mutation ConfirmBooking($bookingKey: String!) {\n  confirmBooking(bookingKey: $bookingKey) {\n    count\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBookingByKey($bookingKey: String!) {\n  bookingsWithKey(bookingKey: $bookingKey) {\n    data {\n      id\n      roomId\n      bookingKey\n      guestId\n      startDate\n      endDate\n      status\n      createdAt\n      updatedAt\n      room {\n        id\n        status\n        capacity\n        caption\n        roomNumber\n        attachBathroom\n        hostelId\n        createdAt\n        updatedAt\n        image {\n          url\n          caption\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n        }\n      }\n      guest {\n        id\n        email\n        fullName\n        phoneNumber\n        isVerified\n        userType\n        createdAt\n        updatedAt\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetBookingByKey($bookingKey: String!) {\n  bookingsWithKey(bookingKey: $bookingKey) {\n    data {\n      id\n      roomId\n      bookingKey\n      guestId\n      startDate\n      endDate\n      status\n      createdAt\n      updatedAt\n      room {\n        id\n        status\n        capacity\n        caption\n        roomNumber\n        attachBathroom\n        hostelId\n        createdAt\n        updatedAt\n        image {\n          url\n          caption\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n        }\n      }\n      guest {\n        id\n        email\n        fullName\n        phoneNumber\n        isVerified\n        userType\n        createdAt\n        updatedAt\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateHostelSearchForm($createHostelSearchFormInput: CreateHostelSearchFormInput!) {\n  createHostelSearchForm(data: $createHostelSearchFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateHostelSearchForm($createHostelSearchFormInput: CreateHostelSearchFormInput!) {\n  createHostelSearchForm(data: $createHostelSearchFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateHostelSellForm($createHostelSellFormInput: CreateHostelSellFormInput!) {\n  createHostelSellForm(data: $createHostelSellFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateHostelSellForm($createHostelSellFormInput: CreateHostelSellFormInput!) {\n  createHostelSellForm(data: $createHostelSellFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateHostelApplicationForm($createHostelApplicationFormInput: CreateHostelApplicationFormInput!) {\n  createHostelApplicationForm(data: $createHostelApplicationFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateHostelApplicationForm($createHostelApplicationFormInput: CreateHostelApplicationFormInput!) {\n  createHostelApplicationForm(data: $createHostelApplicationFormInput) {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CheckValidBooking($roomIds: [Int!]!, $startDate: DateTime!, $endDate: DateTime!) {\n  checkValidBooking(roomIds: $roomIds, startDate: $startDate, endDate: $endDate) {\n    isValid\n    message\n    totalPrice\n    totalDays\n    bookingSummary {\n      roomId\n      price\n      totalPriceOfRoom\n      priceType\n    }\n  }\n}"): (typeof documents)["query CheckValidBooking($roomIds: [Int!]!, $startDate: DateTime!, $endDate: DateTime!) {\n  checkValidBooking(roomIds: $roomIds, startDate: $startDate, endDate: $endDate) {\n    isValid\n    message\n    totalPrice\n    totalDays\n    bookingSummary {\n      roomId\n      price\n      totalPriceOfRoom\n      priceType\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FindRoomsByRoomIds($roomIds: [Int!]!) {\n  findRoomsByRoomIds(roomIds: $roomIds) {\n    roomNumbers\n    name\n  }\n}"): (typeof documents)["query FindRoomsByRoomIds($roomIds: [Int!]!) {\n  findRoomsByRoomIds(roomIds: $roomIds) {\n    roomNumbers\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SendMmailAfterBooking($email: String!, $data: BookingConfirmationEmailDto!) {\n  sendMailAfterBooking(email: $email, data: $data)\n}"): (typeof documents)["mutation SendMmailAfterBooking($email: String!, $data: BookingConfirmationEmailDto!) {\n  sendMailAfterBooking(email: $email, data: $data)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getHostelBySlug($slug: String!) {\n  getHostelBySlug(slug: $slug) {\n    data {\n      id\n      name\n      description\n      admissionFee\n      depositAmount\n      slug\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      service {\n        services\n      }\n      hostelRules {\n        rules\n      }\n      gallery {\n        url\n        isSelected\n      }\n      address {\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      contact {\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        caption\n        capacity\n        roomNumber\n        description\n        status\n        roomAmenity {\n          amenity\n        }\n        image {\n          url\n          id\n          caption\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          isDynamicPricing\n          discountAmount\n          discountType\n        }\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getHostelBySlug($slug: String!) {\n  getHostelBySlug(slug: $slug) {\n    data {\n      id\n      name\n      description\n      admissionFee\n      depositAmount\n      slug\n      verifiedBySuperAdmin\n      verifiedByCommunityOwner\n      service {\n        services\n      }\n      hostelRules {\n        rules\n      }\n      gallery {\n        url\n        isSelected\n      }\n      address {\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      contact {\n        phone\n        altPhone\n        email\n      }\n      rooms {\n        id\n        caption\n        capacity\n        roomNumber\n        description\n        status\n        roomAmenity {\n          amenity\n        }\n        image {\n          url\n          id\n          caption\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          isDynamicPricing\n          discountAmount\n          discountType\n        }\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation logInUser($input: LoginInput!) {\n  loginUser(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"): (typeof documents)["mutation logInUser($input: LoginInput!) {\n  loginUser(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getSearchQueries($query: String!) {\n  searchQueries(query: $query) {\n    data {\n      country\n      city\n      subCity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getSearchQueries($query: String!) {\n  searchQueries(query: $query) {\n    data {\n      country\n      city\n      subCity\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query searchHostel($input: SearchHostelInput!) {\n  getHostelsBySearch(input: $input) {\n    data {\n      name\n      description\n      hostelType\n      genderType\n      address {\n        city\n        country\n        subCity\n        street\n        latitude\n        longitude\n      }\n      rooms {\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n        }\n        image {\n          url\n          id\n        }\n      }\n      contact {\n        phone\n        email\n        altPhone\n      }\n      gallery {\n        url\n      }\n      slug\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query searchHostel($input: SearchHostelInput!) {\n  getHostelsBySearch(input: $input) {\n    data {\n      name\n      description\n      hostelType\n      genderType\n      address {\n        city\n        country\n        subCity\n        street\n        latitude\n        longitude\n      }\n      rooms {\n        price {\n          id\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n        }\n        image {\n          url\n          id\n        }\n      }\n      contact {\n        phone\n        email\n        altPhone\n      }\n      gallery {\n        url\n      }\n      slug\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getGoogleOauthUrl {\n  getGoogleAuthUrl {\n    url\n  }\n}"): (typeof documents)["query getGoogleOauthUrl {\n  getGoogleAuthUrl {\n    url\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation logOut {\n  logout {\n    success\n    message\n  }\n}"): (typeof documents)["mutation logOut {\n  logout {\n    success\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation refreshToken {\n  refreshTokens {\n    user {\n      email\n      fullName\n      id\n      userType\n      hostelId\n    }\n    token {\n      refreshToken\n      accessToken\n    }\n  }\n}"): (typeof documents)["mutation refreshToken {\n  refreshTokens {\n    user {\n      email\n      fullName\n      id\n      userType\n      hostelId\n    }\n    token {\n      refreshToken\n      accessToken\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation signupUser($input: SignupInput!) {\n  signupUser(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"): (typeof documents)["mutation signupUser($input: SignupInput!) {\n  signupUser(input: $input) {\n    email\n    id\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation signUpWithGoogle($input: SignupWithGoogleInput!) {\n  signUpWithGoogle(input: $input) {\n    id\n    email\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"): (typeof documents)["mutation signUpWithGoogle($input: SignupWithGoogleInput!) {\n  signUpWithGoogle(input: $input) {\n    id\n    email\n    userType\n    token {\n      accessToken\n      refreshToken\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation getTravelBudget($input: TravelBudgetCalculatorInput!) {\n  getTravelBudget(input: $input) {\n    personalizedTravelGuide\n    data {\n      category\n      cost\n      currency\n      per\n      shortGuide\n    }\n  }\n}"): (typeof documents)["mutation getTravelBudget($input: TravelBudgetCalculatorInput!) {\n  getTravelBudget(input: $input) {\n    personalizedTravelGuide\n    data {\n      category\n      cost\n      currency\n      per\n      shortGuide\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation getTravelDestination($input: TravelDestinationFinderInput!) {\n  getTravelDestination(input: $input) {\n    personalizedTravelGuide\n    data {\n      activitiesToDo\n      destinationCountry\n      destinationPlace\n      expectedCost\n      shortGuide\n    }\n  }\n}"): (typeof documents)["mutation getTravelDestination($input: TravelDestinationFinderInput!) {\n  getTravelDestination(input: $input) {\n    personalizedTravelGuide\n    data {\n      activitiesToDo\n      destinationCountry\n      destinationPlace\n      expectedCost\n      shortGuide\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SendCustomEmail($email: String!, $name: String!, $subject: String!, $htmlContent: String!) {\n  sendCustomEmail(\n    email: $email\n    name: $name\n    subject: $subject\n    htmlContent: $htmlContent\n  )\n}"): (typeof documents)["mutation SendCustomEmail($email: String!, $name: String!, $subject: String!, $htmlContent: String!) {\n  sendCustomEmail(\n    email: $email\n    name: $name\n    subject: $subject\n    htmlContent: $htmlContent\n  )\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation completeOnboarding {\n  completeOnboarding {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation completeOnboarding {\n  completeOnboarding {\n    data {\n      id\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getOnboardingData {\n  getOnboardingData {\n    data {\n      address {\n        id\n      }\n      contact {\n        id\n      }\n      amenities {\n        id\n      }\n      gallery {\n        id\n      }\n      rooms {\n        id\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query getOnboardingData {\n  getOnboardingData {\n    data {\n      address {\n        id\n      }\n      contact {\n        id\n      }\n      amenities {\n        id\n      }\n      gallery {\n        id\n      }\n      rooms {\n        id\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateAmenity($createAmenityInput: CreateAmenityInput!) {\n  createAmenity(createAmenityInput: $createAmenityInput) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation CreateAmenity($createAmenityInput: CreateAmenityInput!) {\n  createAmenity(createAmenityInput: $createAmenityInput) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FindAmenityByHostelId($hostelId: Int!) {\n  findAmenityByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query FindAmenityByHostelId($hostelId: Int!) {\n  findAmenityByHostelId(hostelId: $hostelId) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RemoveAmenity($id: Int!) {\n  removeAmenity(id: $id) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation RemoveAmenity($id: Int!) {\n  removeAmenity(id: $id) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateAmenity($updateAmenityInput: UpdateAmenityInput!) {\n  updateAmenity(updateAmenityInput: $updateAmenityInput) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["mutation UpdateAmenity($updateAmenityInput: UpdateAmenityInput!) {\n  updateAmenity(updateAmenityInput: $updateAmenityInput) {\n    data {\n      id\n      amenities\n      hostelId\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetFeaturedHostels($pageSize: Int!) {\n  getAllHostels(pageSize: $pageSize) {\n    data {\n      id\n      name\n      genderType\n      description\n      slug\n      address {\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      gallery {\n        url\n        caption\n        isSelected\n      }\n      rooms {\n        id\n        caption\n        capacity\n        roomNumber\n        status\n        createdAt\n        updatedAt\n        hostelId\n        image {\n          url\n          id\n          caption\n          createdAt\n          updatedAt\n          roomId\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          isDynamicPricing\n          discountAmount\n          discountType\n        }\n      }\n      service {\n        services\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"): (typeof documents)["query GetFeaturedHostels($pageSize: Int!) {\n  getAllHostels(pageSize: $pageSize) {\n    data {\n      id\n      name\n      genderType\n      description\n      slug\n      address {\n        country\n        city\n        subCity\n        street\n        latitude\n        longitude\n      }\n      gallery {\n        url\n        caption\n        isSelected\n      }\n      rooms {\n        id\n        caption\n        capacity\n        roomNumber\n        status\n        createdAt\n        updatedAt\n        hostelId\n        image {\n          url\n          id\n          caption\n          createdAt\n          updatedAt\n          roomId\n        }\n        price {\n          baseAmountPerDay\n          baseAmountPerMonth\n          currency\n          isDynamicPricing\n          discountAmount\n          discountType\n        }\n      }\n      service {\n        services\n      }\n    }\n    error {\n      message\n      code\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;